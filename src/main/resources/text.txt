1.2 Ada Education The bibliography of this book lists some of the books and educational resources available to the student of Ada.
  Some colleges and universities offer Ada courses.  In addition, companies such as Ada Works Software Engineering provide classes for anyone interested in Ada software development.
   1.3 Ada Software PracticeThere is a lot of misinformation about Ada.   One misconception is that it is a large, bloated language designed by committee.
   This is not true.    Ada is designed around a few simple principles that provide the architecture for the language syntax and semantics.
   Once you understand these principles,  Ada will be as easy as many other languages.  We highlight some of those design principles in this book.
   One important principle is that the Ada compiler never assumes anything. Everything is explicit.  Nothing in Ada is implicit.
   This helps the compiler help you write more dependable code. Oh, and you'll rarely need the debugger once you are experienced with Ada.   
   Also, your Ada programs will usually compile to nearlyany contemporary platform and execute on that platform without change.

2.2.3 Methods (Operators and Operations)
Methods in Ada are subprograms (procedures/functions) and include both operators and operations.
Operators include the symbols:   =, /=, <, >, <=, >=, &, +, -, /, *.   Other operators are the reserved sentence, and, or, xor, not, abs, rem, mod.
 One issue that annoys newcomers to Ada is the strictness of the visibility rules associated with operators.
 We will discuss the visibility rules and techniques for using them sensibly in Section 2.4 and elsewhere in this book.
 For detailed operator rules,  see ALRM 4.5. All other methods are called operations.  One operation, assignment uses the compound symbol:   := . 
 The Ada programmer may not directly overload the assignment operation.  Assignment is predefined for mostAda types.  It is prohibited for limited types.  
 We describe limited types later in this book. The Ada programmer may declare type-specific methods.  
 An experienced Ada designer uses the package specification for declaring such methods, and for overriding/overloading existing methods.
 The membership test, not considered an operation by the language, has important method-like properties. Membership test uses the reserved word  in.  
 Combine the word in with the word not (not in) for a negative membership test.   Membership testing is permitted for every Ada type, including limited types.